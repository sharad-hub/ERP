1. Documentation  Go Performing Async Selects with Includes and Sorting
   IRepositoryAsync<Customer> customerRepository = new Repository<Customer>(context, unitOfWork);
    ICustomerService customerService = new CustomerService(customerRepository);

    var asyncTask = customerService
        .Query(x => x.Country == "USA")
        .Include(x => x
            .Orders
            .Select(y => y.OrderDetails))
        .OrderBy(x => x
            .OrderBy(y => y.CompanyName)
            .ThenBy(z => z.ContactName))
        .SelectAsync();
2.Documentation  Go Query Against Entity Framework or IQueryable Directly
var customers = _customerService
                    .Queryable()
                    .Include(t => t
                        .Orders
                        .Select(u => u.OrderDetails))
                    .Where(t => t.CustomerID == key)
                   .OrderBy(t => t.CompanyName)
                   .ThenBy(t => t.ContactName);

3.Documentation  Go Performing Async Selects with Includes and Sorting

 IRepositoryAsync<Customer> customerRepository = new Repository<Customer>(context, unitOfWork);
    ICustomerService customerService = new CustomerService(customerRepository);

    var asyncTask = customerService
        .Query(x => x.Country == "USA")
        .Include(x => x
            .Orders
            .Select(y => y.OrderDetails))
        .OrderBy(x => x
            .OrderBy(y => y.CompanyName)
            .ThenBy(z => z.ContactName))
        .SelectAsync();

    var customers = asyncTask.Result;

	5. Home  Go Deep Loading a Complex Object Graph
 IRepositoryAsync<Customer> customerRepository = new Repository<Customer>(context, unitOfWork);
                
        customerForUpdateDeleteGraphTest = customerRepository
        .Query(x => x.CustomerID == "LLE38")
        .Include(x => x.Orders)
        .Select()
        .SingleOrDefault();

    // Testing that customer was created
    Assert.AreEqual(customerForUpdateDeleteGraphTest.CustomerID, "LLE38");

    // Testing that orders in customer graph were created
    Assert.IsTrue(customerForUpdateDeleteGraphTest.Orders.Count == 2);

    // Make changes to the object graph while in this context, will save these 
    // changes in another context, testing managing states between and/or while disconnected
    // from the orginal DataContext

    // Updating the customer in the graph
    customerForUpdateDeleteGraphTest.City = "Houston";
    customerForUpdateDeleteGraphTest.ObjectState = ObjectState.Modified;

    // Updating the order in the graph
    var firstOrder = customerForUpdateDeleteGraphTest.Orders.Take(1).Single();
    firstOrder.ShipCity = "Houston";
    firstOrder.ObjectState = ObjectState.Modified;

    // Deleting one of the orders from the graph
    var secondOrder = customerForUpdateDeleteGraphTest.Orders.Skip(1).Take(1).Single();
    secondOrder.ObjectState = ObjectState.Deleted;